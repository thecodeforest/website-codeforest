rename(value = y) %>%
bind_rows(fcast_1 %>%
mutate(ds = ymd(ds),
actual = fcast_results$valid[[1]]$y
) %>%
select(ds, yhat, actual) %>%
rename(predicted = yhat) %>%
gather(key, value, -ds)) %>%
ggplot(aes(ds, value, color = key)) +
geom_point() +
my_plot_theme() +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
)
fcast_results$train[[1]] %>%
mutate(key = 'train') %>%
rename(value = y) %>%
bind_rows(fcast_1 %>%
mutate(ds = ymd(ds),
actual = fcast_results$valid[[1]]$y
) %>%
select(ds, yhat, actual) %>%
rename(predicted = yhat) %>%
gather(key, value, -ds)) %>%
mutate(key = str_to_title(key)) %>%
ggplot(aes(ds, value, color = key)) +
geom_point() +
my_plot_theme() +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
)
fcast_results$train[[1]] %>%
mutate(key = 'train') %>%
rename(value = y) %>%
bind_rows(fcast_1 %>%
mutate(ds = ymd(ds),
actual = fcast_results$valid[[1]]$y
) %>%
select(ds, yhat, actual) %>%
rename(predicted = yhat) %>%
gather(key, value, -ds)) %>%
mutate(key = str_to_title(key)) %>%
ggplot(aes(ds, value, color = key)) +
geom_point() +
my_plot_theme() +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
) +
stat_smooth()
fcast_results$train[[1]] %>%
mutate(key = 'train') %>%
rename(value = y) %>%
bind_rows(fcast_1 %>%
mutate(ds = ymd(ds),
actual = fcast_results$valid[[1]]$y
) %>%
select(ds, yhat, actual) %>%
rename(predicted = yhat) %>%
gather(key, value, -ds)) %>%
mutate(key = str_to_title(key)) %>%
ggplot(aes(ds, value, color = key)) +
geom_point() +
my_plot_theme() +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
)
library(ggforce)
result_plot <- fcast_results$train[[1]] %>%
mutate(key = 'train') %>%
rename(value = y) %>%
bind_rows(fcast_1 %>%
mutate(ds = ymd(ds),
actual = fcast_results$valid[[1]]$y
) %>%
select(ds, yhat, actual) %>%
rename(predicted = yhat) %>%
gather(key, value, -ds)) %>%
mutate(key = str_to_title(key))
result_plot
tail(result_plot$ds, 90)
result_plot %>%
ggplot(aes(ds, value, color = key)) +
geom_point() +
my_plot_theme() +
facet_zoom(x = ds %in% tail(result_plot$ds, 90)) +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
)
result_plot %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(result_plot$ds, 90)) +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
)
result_plot %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.2) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(result_plot$ds, 90)) +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
)
result_plot %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(result_plot$ds, 90)) +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
)
result_plot <- fcast_results$train[[1]] %>%
mutate(key = 'Historical') %>%
rename(value = y) %>%
bind_rows(fcast_1 %>%
mutate(ds = ymd(ds),
actual = fcast_results$valid[[1]]$y
) %>%
select(ds, yhat, actual) %>%
rename(predicted = yhat) %>%
gather(key, value, -ds)) %>%
mutate(key = str_to_title(key))
result_plot %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(result_plot$ds, 90)) +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
)
knitr::include_graphics("/Users/mlebo1/Desktop/begin_new/crossvalidation_timeseries/post_plot.png")
result_plot %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(result_plot$ds, 90)) +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
)
result_plot <- fcast_results$train[[1]] %>%
mutate(key = 'train') %>%
rename(value = y) %>%
bind_rows(fcast_1 %>%
mutate(ds = ymd(ds),
actual = fcast_results$valid[[1]]$y
) %>%
select(ds, yhat, actual) %>%
rename(predicted = yhat) %>%
gather(key, value, -ds)) %>%
mutate(key = str_to_title(key))
result_plot %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(result_plot$ds, 90)) +
labs(x = 'Date (day)',
y = 'Units',
color = 'Part'
)
fcast_results$valid[[1]]
slice01_validation <-
fcast_results$valid[[1]] %>%
mutate(ds = ymd(ds),
actual = fcast_results$valid[[1]]$y
)
slice01_validation
fcast_results
fcast_results$pred_prophet
fcast_results$pred_prophet[[1]]
fcast_results$pred_prophet[[1]] %>%
transmute(ds = ymd(ds),
predicted = yhat,
actual = fcast_results$valid[[1]]$y
)
fcast_results$pred_prophet[[1]] %>%
transmute(ds = ymd(ds),
predicted = yhat,
actual = fcast_results$valid[[1]]$y
) %>%
gather(key, value, -ds)
slice01_training <-
fcast_results$train[[1]] %>%
mutate(key = 'Training') %>%
rename(value = y)
slice01_validation <-
fcast_results$pred_prophet[[1]] %>%
transmute(ds = ymd(ds),
predicted = yhat,
actual = fcast_results$valid[[1]]$y
) %>%
gather(key, value, -ds) %>%
mutate(key = str_to_title(key))
bind_rows(slice01_training,
slice01_validation
) %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(result_plot$ds, 90)) +
labs(x = 'Date (Day)',
y = 'Units',
color = 'Part'
)
styler:::style_selection()
styler:::style_selection()
cv_slice = 1
slice01_training <-
fcast_results$train[[cv_slice]] %>%
mutate(key = "Training") %>%
rename(value = y)
slice01_validation <-
fcast_results$pred_prophet[[cv_slice]] %>%
transmute(
ds = ymd(ds),
predicted = yhat,
actual = fcast_results$valid[[cv_slice]]$y
) %>%
gather(key, value, -ds) %>%
mutate(key = str_to_title(key))
bind_rows(
slice01_training,
slice01_validation
) %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(slice01_validation$ds, 90)) +
labs(
x = "Date (Day)",
y = "Units",
color = "Part"
)
cv_slice = 1
slice01_training <-
fcast_results$train[[cv_slice]] %>%
mutate(key = "Training") %>%
rename(value = y)
slice01_validation <-
fcast_results$pred_prophet[[cv_slice]] %>%
transmute(
ds = ymd(ds),
predicted = yhat,
actual = fcast_results$valid[[cv_slice]]$y
) %>%
gather(key, value, -ds) %>%
mutate(key = str_to_title(key))
bind_rows(
slice01_training,
slice01_validation
) %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(slice01_validation$ds, 90)) +
labs(
x = "Date (Day)",
y = "Units",
color = "Part"
)
bind_rows(
slice01_training,
slice01_validation
) %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(result_plot$ds, 90)) +
labs(
x = "Date (Day)",
y = "Units",
color = "Part"
)
setwd('/Users/mlebo1/Desktop/site')
blogdown::serve_site()
bind_rows(
slice_training,
slice_validation
) %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(slice_validation$ds, 90)) +
labs(
x = "Date (Day)",
y = "Units",
color = "Part"
)
# Core package
library(tidyverse)
library(rlang)
library(janitor)
# Date manipulation
library(lubridate)
# Bootstrapping and time series cross validation
library(rsample)
# Forecasting
library(forecast)
library(prophet)
library(tidyquant)
library(timetk)
library(sweep)
# Holiday dates
library(timeDate)
# Parallel computation
library(furrr)
# Calculating standard error
library(plotrix)
# Table formatting for Markdown
library(kableExtra)
# Visualization of seperate time series components
library(ggforce)
# Global plot theme
theme_set(theme_bw())
# Code Forest repo
repo <- 'https://raw.githubusercontent.com/thecodeforest/time-series-cv-post/master/'
# Helper functions for manipulating forecasting results
source(file.path(repo, '/helper-functions/tsCVHelpers.R'))
# Helper function for visualization
source(file.path(repo, '/helper-functions/vizTheme.R'))
# Monthly sales data
sales_df <- read_csv(file.path(repo, 'data/beverage_sales.csv'))
store_sales <- read_csv(file.path(repo, "data/store_sales.csv"))
kable(store_sales %>% head(10), "html", align = "c") %>%
kable_styling(bootstrap_options = c("striped",
"hover"),
full_width = TRUE) %>%
scroll_box(width = "720px", height = "160px")
# Set seed for reproducibility
set.seed(2018)
# Sample 100 days to serve as 'promotional events'
promos <- sample(unique(store_sales$date), size = 100)
# Extract dates of major US holidays
holidays <- holidayNYSE(year = c(year(min(store_sales$date)):year(max(store_sales$date)))) %>%
ymd()
# Add 'sales' to simulate effect of promotion on demand
# Rename date and sales fields to be compatible with Prophet API
sales_xreg <- store_sales %>%
mutate(
sales = as.numeric(sales),
sales = case_when(
date %in% promos ~ sales + rnorm(1, 45, 5),
date %in% holidays ~ sales + rnorm(1, 25, 5),
TRUE ~ sales
),
sales = round(sales)
) %>%
rename(
ds = date,
y = sales
)
# Field names must match below for Prophet API
xreg_df <- tibble(
ds = c(promos, holidays),
holiday = c(
rep("Promo", length(promos)),
rep("USHoliday", length(holidays))
)
)
left_join(sales_xreg, xreg_df) %>%
replace_na(list(holiday =  "no event")) %>%
ggplot(aes(ds, y, color = holiday, group = 1)) +
geom_point(alpha = 0.5) +
labs(x = 'Date (Day)',
y = 'Units Sold'
) +
my_plot_theme()
train_valid <- rolling_origin(
sales_xreg,
initial = floor(4.5 * 365), # 4.5 years of training
assess = 90, # assess based on 90-day ahead forecasts
cumulative = TRUE # continue to build training set across time
) %>%
mutate(
train = map(splits, training), # split training
valid = map(splits, testing) # split validation
)
print(train_valid)
# Replicate and 'nest' each resulting copy of xreg_df
split_ids <- map_dfr(1:nrow(train_valid), function(x) xreg_df) %>%
mutate(id = rep(train_valid$id, each = nrow(xreg_df))) %>%
group_by(id) %>%
nest() %>%
rename(xreg = data)
# Join by the id column
train_valid_xreg <- inner_join(train_valid, split_ids)
print(train_valid_xreg)
fcast_results <-
train_valid_xreg %>%
mutate(prophet_fit = map2(
train,
xreg,
function(x, y)
prophet(
df = x,
holidays = y,
growth = "linear",
yearly.seasonality = "auto",
weekly.seasonality = "auto"
)
),
pred_prophet = map2(prophet_fit, valid, predict)
)
bind_rows(
slice_training,
slice_validation
) %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(slice_validation$ds, 90)) +
labs(
x = "Date (Day)",
y = "Units",
color = "Part"
)
cv_slice = 1
slice_training <-
fcast_results$train[[cv_slice]] %>%
mutate(key = "Training") %>%
rename(value = y)
slice_validation <-
fcast_results$pred_prophet[[cv_slice]] %>%
transmute(
ds = ymd(ds),
predicted = yhat,
actual = fcast_results$valid[[cv_slice]]$y
) %>%
gather(key, value, -ds) %>%
mutate(key = str_to_title(key))
bind_rows(
slice_training,
slice_validation
) %>%
ggplot(aes(ds, value, color = key)) +
geom_point(size = 2) +
geom_line(alpha = 0.3) +
my_plot_theme() +
facet_zoom(x = ds %in% tail(slice_validation$ds, 90)) +
labs(
x = "Date (Day)",
y = "Units",
color = "Part"
)
results_tidy <- fcast_results %>%
select(id, pred_prophet) %>%
unnest() %>%
mutate(ds = ymd(ds)) %>%
inner_join(sales_xreg) %>%
select(id, ds, yhat, y) %>%
mutate(error = y - yhat) %>%
group_by(id) %>%
mutate(index = row_number()) %>%
ungroup()
results_tidy %>%
group_by(index) %>%
summarise(q50 = median(error),
q05 = quantile(error, .05),
q95 = quantile(error, .95)
)  %>%
ggplot(aes(index, q50)) +
geom_point(size = 2, color = 'red') +
geom_errorbar(aes(ymin = q05, ymax = q95), alpha  = 0.5) +
labs(x = 'Forecasting Horizon (Days)',
y = 'Error (Bars represent 5th/95th percentiles)'
) +
my_plot_theme() +
scale_y_continuous(breaks = seq(-10, 10, by = 2.5))
blogdown::serve_site()
blogdown::stop_server()
setwd('/Users/mlebo1/Desktop/site')
blogdown::serve_site()
blogdown::serve_site()
setwd('/Users/mlebo1/Desktop/site')
blogdown::serve_site()
traceback()
install.packages('blogdown')
install.packages("blogdown")
library(blogdown)
setwd('/Users/mlebo1/Desktop/site')
blogdown::serve_site()
# train_transaction %>% glimpse()
# train_identity = fread(file.path(data_dir, 'train_identity.csv'),
#                         data.table = FALSE
#                         ) %>%
#      clean_names()
#
# head(train_transaction)
# head(train_identity)
# Explore -----------------------------------------------------------------
servr::daemon_stop(1)
