head(blargh)
head(prediction_results)
coverage_calc = function(actual, upr, lwr){
return(ifelse(actual < upr & actual > lwr, 1, 0))
}
prediction_results %>%
mutate(nn = mape_calc(actual, nn_point_forecast),
stl = mape_calc(actual, stl_point_forecast),
hw= mape_calc(actual, hw_point_forecast),
nn_coverage = coverage_calc(actual, nn_hi_95, nn_lo_95),
stl_coverage = coverage_calc(actual, stl_hi_95, stl_lo_95),
hw_coverage = coverage_calc(actual, hw_hi_95, hw_lo_95)
) %>%
head(10)
prediction_results %>%
mutate(nn = mape_calc(actual, nn_point_forecast),
stl = mape_calc(actual, stl_point_forecast),
hw= mape_calc(actual, hw_point_forecast),
nn_coverage = coverage_calc(actual, nn_hi_95, nn_lo_95),
stl_coverage = coverage_calc(actual, stl_hi_95, stl_lo_95),
hw_coverage = coverage_calc(actual, hw_hi_95, hw_lo_95)
) %>%
select(nn:hw_coverage) %>%
melt() %>%
head(5)
test_results = prediction_results %>%
mutate(nn = mape_calc(actual, nn_point_forecast),
stl = mape_calc(actual, stl_point_forecast),
hw= mape_calc(actual, hw_point_forecast),
nn_coverage = coverage_calc(actual, nn_hi_95, nn_lo_95),
stl_coverage = coverage_calc(actual, stl_hi_95, stl_lo_95),
hw_coverage = coverage_calc(actual, hw_hi_95, hw_lo_95)
) %>%
select(nn:hw_coverage)
head(test_results)
test_mape = test_results %>%
select(nn:hw) %>%
melt() %>%
rename(method = variable,
MAPE = value) %>%
group_by(method) %>%
summarise(MAPE = round(mean(MAPE), 2)) %>%
data.frame() %>%
arrange(MAPE)
head(test_mape)
test_coverage = test_results %>%
select(nn_coverage:hw_coverage) %>%
melt() %>%
head(10)
head(test_coverage)
test_coverage = test_results %>%
select(nn_coverage:hw_coverage) %>%
melt() %>%
head(10) %>%
rename(method = variable) %>%
group_by(method) %>%
summarise(coverage = round(sum(value)/n() * 100, 1)) %>%
data.frame()
head(test_coverage)
test_coverage = test_results %>%
select(nn_coverage:hw_coverage) %>%
melt() %>%
head(10) %>%
rename(method = variable) %>%
group_by(method) %>%
summarise(coverage = round(sum(value)/n() * 100, 1)) %>%
data.frame()
head(test_coverage)
test_coverage = test_results %>%
select(nn_coverage:hw_coverage) %>%
melt()
View(test_coverage)
test_coverage = test_results %>%
select(nn_coverage:hw_coverage) %>%
melt() %>%
rename(method = variable) %>%
group_by(method) %>%
summarise(coverage = round(sum(value)/n() * 100, 1)) %>%
data.frame()
head(test_coverage)
head(test_mape)
help(gsub)
test_coverage = test_results %>%
select(nn_coverage:hw_coverage) %>%
melt() %>%
rename(method = variable) %>%
group_by(method) %>%
summarise(coverage = round(sum(value)/n() * 100, 1)) %>%
data.frame() %>%
mutate(method = gsub("_coverage", "", method))
head(test_coverage)
test_comparison_df = inner_join(test_mape,
test_coverage
) %>%
arrange(MAPE, coverage)
test_comparison_df
# combine all forecasts here
mape_calc = function(actual, predicted){
return(abs(actual - predicted)/actual * 100)
}
coverage_calc = function(actual, upr, lwr){
return(ifelse(actual < upr & actual > lwr, 1, 0))
}
test_results = prediction_results %>%
mutate(nn = mape_calc(actual, nn_point_forecast),
stl = mape_calc(actual, stl_point_forecast),
hw= mape_calc(actual, hw_point_forecast),
nn_coverage = coverage_calc(actual, nn_hi_95, nn_lo_95),
stl_coverage = coverage_calc(actual, stl_hi_95, stl_lo_95),
hw_coverage = coverage_calc(actual, hw_hi_95, hw_lo_95)
) %>%
select(nn:hw_coverage)
test_mape = test_results %>%
select(nn:hw) %>%
melt() %>%
rename(method = variable,
MAPE = value) %>%
group_by(method) %>%
summarise(MAPE = round(mean(MAPE), 2)) %>%
data.frame()
test_coverage = test_results %>%
select(nn_coverage:hw_coverage) %>%
melt() %>%
rename(method = variable) %>%
group_by(method) %>%
summarise(coverage = round(sum(value)/n() * 100, 1)) %>%
data.frame() %>%
mutate(method = gsub("_coverage", "", method))
test_comparison_df = inner_join(test_mape,
test_coverage
) %>%
rename(coverage_95 = coverage) %>%
arrange(MAPE, coverage_95)
p = 0.25
n = 5
k = 2
factorial(n)
factorial(n)/factorial(n - k) * factorial(k)
factorial(n)/factorial(n - k) * factorial(k) * p^k * (1 - p)^(n - k)
factorial(n)/factorial(n - k) * factorial(k) * p^k * ((1 - p)^(n - k))
(factorial(n)/(factorial(n - k) * factorial(k))) * p^k * ((1 - p)^(n - k))
(factorial(n)/(factorial(n - k) * factorial(k))) * p^k * (1 - p)^(n - k)
p = 0.25
n = 5
k = 1
(factorial(n)/(factorial(n - k) * factorial(k))) * p^k * (1 - p)^(n - k)
p = 0.25
n = 4
k = 1
(factorial(n)/(factorial(n - k) * factorial(k))) * p^k * (1 - p)^(n - k)
p = 0.25
n = 10
k = 1
(factorial(n)/(factorial(n - k) * factorial(k))) * p^k * (1 - p)^(n - k)
my_plot_theme = function(){
font_family = "Helvetica"
font_face = "bold"
return(theme(
axis.text.x = element_text(size = 18, face = font_face, family = font_family),
axis.text.y = element_text(size = 18, face = font_face, family = font_family),
axis.title.x = element_text(size = 20, face = font_face, family = font_family),
axis.title.y = element_text(size = 20, face = font_face, family = font_family),
strip.text.y = element_text(size = 18, face = font_face, family = font_family),
plot.title = element_text(size = 18, face = font_face, family = font_family),
legend.position = "top",
legend.title = element_text(size = 16,
face = font_face,
family = font_family),
legend.text = element_text(size = 14,
face = font_face,
family = font_family)
))
}
### Downloading images ###
libs = c('RJSONIO', 'keras', 'ggplot2', 'dplyr', 'reshape')
lapply(libs, require, character.only = TRUE)
base_dir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(base_dir)
blargh = application_vgg19()
summary(blargh)
my_plot_theme = function(){
font_family = "Helvetica"
font_face = "bold"
return(theme(
axis.text.x = element_text(size = 18, face = font_face, family = font_family),
axis.text.y = element_text(size = 18, face = font_face, family = font_family),
axis.title.x = element_text(size = 20, face = font_face, family = font_family),
axis.title.y = element_text(size = 20, face = font_face, family = font_family),
strip.text.y = element_text(size = 18, face = font_face, family = font_family),
plot.title = element_text(size = 18, face = font_face, family = font_family),
legend.position = "top",
legend.title = element_text(size = 16,
face = font_face,
family = font_family),
legend.text = element_text(size = 14,
face = font_face,
family = font_family)
))
}
### Downloading images ###
libs = c('RJSONIO', 'keras', 'ggplot2', 'dplyr', 'reshape')
lapply(libs, require, character.only = TRUE)
base_dir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(base_dir)
blargh = application_vgg19()
summary(blargh)
conv_base <- application_vgg16(
weights = "imagenet",
include_top = FALSE,
input_shape = c(150, 150, 3)
)
vgg_19_base <- application_vgg19(
weights = "imagenet",
include_top = FALSE,
input_shape = c(150, 150, 3)
)
vgg_19_base
#summary(blargh)
#http://www.image-net.org/
image_url_json = list(
'hot dog' = c('http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07697537',
'http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07690019'),
'hamburger' = c('http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07697100',
'http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07697313'),
'pizza' = c('http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07874159',
'http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07874259'),
'taco' = c('http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07880751',
'http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07880880')
)
train_dir = file.path(base_dir, 'train')
train_datagen <- image_data_generator(rescale = 1/255,
rotation_range = 40,
width_shift_range = 0.20,
height_shift_range = 0.20,
shear_range = 0.20,
zoom_range = 0.20,
horizontal_flip = TRUE
)
validation_datagen <- image_data_generator(rescale = 1/255)
train_generator <- flow_images_from_directory(
train_dir,
train_datagen,
target_size = c(150, 150),
batch_size = 20,
class_mode = "categorical"
)
validation_dir = file.path(base_dir, 'validation')
validation_generator <- flow_images_from_directory(
validation_dir,
validation_datagen,
target_size = c(150, 150),
batch_size = 20,
class_mode = "categorical"
)
model = keras_model_sequential() %>%
layer_conv_2d(filters = 8, kernel_size = c(3, 3), activation = "relu",
input_shape = c(150, 150, 3)) %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_conv_2d(filters = 16, kernel_size = c(3, 3), activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_conv_2d(filters = 32, kernel_size = c(3, 3), activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_flatten() %>%
layer_dropout(rate = 0.25) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = length(names(image_url_json)), activation = "softmax")
model
attributes(model)
model$input_spec
model$weights
model
vgg_19_base
library(blogdown)
library(kableExtra)
library(rmarkdown)
library(png)
library(raster)
library(devtools)
library(dplyr)
library(VSURF)
library(quantregForest)
library(broom)
library(merTools)
library(lubridate)
setwd('/Users/mlebo1/Desktop/Site')
#blogdown::install_hugo(force = TRUE)
#blogdown::new_site(theme = "gcushen/hugo-academic")
blogdown::serve_site()
servr::daemon_stop("4320050208")
library(lubridate)
library(dplyr)
library(sqldf)
library(RPostgreSQL)
con = dbConnect(pg, user="postgres", password="password",
host="localhost", port=5432)
pg = dbDriver("PostgreSQL")
con = dbConnect(pg, user="postgres", password="password",
host="localhost", port=5432)
blah = dbGetQuery(con, "select * from flights limit 10")
head(blah, 30)
View(blah)
my_query =
"
SELECT carrier, month, AVG(air_time) OVER (PARTITION BY carrier, month)
FROM flights
"
results = sqldf(my_query)
my_query =
"
SELECT carrier, month, AVG(air_time) OVER (PARTITION BY carrier, month)
FROM flights
"
blah = dbGetQuery(con, my_query)
head(blah, 30)
my_query =
"
select * from flights limit 10
"
blah = dbGetQuery(con, my_query)
flight_tbl = dbGetQuery(con, my_query)
View(flight_tbl)
my_query =
"
SELECT carrier, month air_time, AVG(air_time) OVER (PARTITION BY carrier, month)
FROM flights
"
results = dbGetQuery(con, my_query)
results
my_query =
"
SELECT carrier, month, air_time, AVG(air_time) OVER (PARTITION BY carrier, month)
FROM flights
"
results = dbGetQuery(con, my_query)
results
my_query =
"
SELECT carrier,
month,
MIN(air_time - avg_air_time) min_air as min_diff,
MAX(air_time - avg_air_time) max_air as max_diff
FROM
(SELECT carrier, month, air_time, AVG(air_time) OVER (PARTITION BY carrier, month) as avg_air_time
FROM flights) as table_1
GROUP BY carrier, month
"
results = dbGetQuery(con, my_query)
head(results)
my_query =
"
SELECT carrier, month, air_time, AVG(air_time) OVER (PARTITION BY carrier, month) as avg_air_time
FROM flights
"
results = dbGetQuery(con, my_query)
head(results)
# tailnum is ID
my_query =
"
select carrier, month, air_time - avg_air_time as air_time_diff
FROM
(SELECT carrier, month, air_time, AVG(air_time) OVER (PARTITION BY carrier, month) as avg_air_time
FROM flights) as table_1
"
results = dbGetQuery(con, my_query)
head(results)
my_query =
"
SELECT carrier, month, MIN(air_time_diff) as min_air, MAX(air_time_diff) as max_air
FROM
(select carrier,
month,
air_time - avg_air_time as air_time_diff
FROM
(SELECT carrier, month, air_time, AVG(air_time) OVER (PARTITION BY carrier, month) as avg_air_time
FROM flights) as table_1) as table_2
"
results = dbGetQuery(con, my_query)
head(results)
my_query =
"
SELECT carrier,
month,
MIN(air_time - avg_air_time) min_air as min_diff,
MAX(air_time - avg_air_time) max_air as max_diff
SELECT carrier, month, MIN(air_time_diff) as min_air, MAX(air_time_diff) as max_air
FROM
(select carrier,
month,
air_time - avg_air_time as air_time_diff
FROM
(SELECT carrier, month, air_time, AVG(air_time) OVER (PARTITION BY carrier, month) as avg_air_time
FROM flights) as table_1) as table_2
GROUP BY carrier, month
"
results = dbGetQuery(con, my_query)
head(results)
my_query =
"
select carrier, month, air_time - avg_air_time as air_time_diff
FROM
(SELECT carrier, month, air_time, AVG(air_time) OVER (PARTITION BY carrier, month) as avg_air_time
FROM flights) as table_1
"
results = dbGetQuery(con, my_query)
head(results)
my_query =
"
SELECT carrier, month, min(air_time_diff) as min_diff, max(air_time_diff) as max_diff
FROM
(
select carrier, month, air_time - avg_air_time as air_time_diff
FROM
(SELECT carrier, month, air_time, AVG(air_time) OVER (PARTITION BY carrier, month) as avg_air_time
FROM flights) as table_1) as table_2
GROUP BY carrier, month
"
results = dbGetQuery(con, my_query)
head(results)
flights = data.frame(nycflights13::flights)
airlines = data.frame(nycflights13::airlines)
planes = data.frame(nycflights13::planes)
planes_tbl = head(planes, 20)
View(planes_tbl)
my_query =
"
SELECT flights.*, planes.*
FROM flights
INNER JOIN planes
ON flights.tailnum = planes.num
limit 100
"
results = dbGetQuery(con, my_query)
my_query =
"
SELECT flights.*, planes.*
FROM flights
INNER JOIN planes
ON flights.tailnum = planes.tailnum
limit 100
"
results = dbGetQuery(con, my_query)
head(results)
my_query =
"
SELECT planes.manufacturer, planes.tailnum
FROM planes
INNER JOIN flights
ON planes.tailnum = flights.tailnum
"
results = dbGetQuery(con, my_query)
head(results)
my_query =
"
SELECT flights.month, planes.manufacturer, planes.tailnum
FROM planes
WHERE flights in (1, 2)
INNER JOIN flights
ON planes.tailnum = flights.tailnum
"
results = dbGetQuery(con, my_query)
head(results)
my_query =
"
SELECT flights.month, planes.manufacturer, planes.tailnum
FROM planes
WHERE flights.month in (1, 2)
INNER JOIN flights
ON planes.tailnum = flights.tailnum
"
results = dbGetQuery(con, my_query)
head(results)
my_query =
"
SELECT flights.month, planes.manufacturer, planes.tailnum
FROM planes
INNER JOIN flights
ON planes.tailnum = flights.tailnum
WHERE flights.month in (1, 2)
"
results = dbGetQuery(con, my_query)
head(results)
my_query =
"
SELECT month, manufacturer, COUNT(*) as flight_count
FROM
(SELECT flights.tailnum,
flights.month,
planes.manufacturer
FROM flights
INNER JOIN planes
ON flights.tailnum = planes.tailnum
WHERE month in (1, 2)) as flt_cnt
GROUP BY
month, manufacturer
"
results = dbGetQuery(con, my_query)
head(results)
library(blogdown)
library(kableExtra)
library(rmarkdown)
library(png)
library(raster)
library(devtools)
library(dplyr)
library(VSURF)
library(quantregForest)
library(broom)
library(merTools)
library(lubridate)
setwd('/Users/mlebo1/Desktop/Site')
blogdown::serve_site()
servr::daemon_stop("4779528464")
