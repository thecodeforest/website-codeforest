create("mcCluster")
library(McCluster)
library("mcCluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(McCluster)
help(mcCluster)
??mcCluster
library(devtools)
library(roxygen2)
create("mcCluster")
library(devtools)
library(roxygen2)
create("mcCluster")
library(devtools)
library(roxygen2)
create(test)
create("test")
library("test", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
help(test)
library(test)
help(test)
library(Plotter)
library("PLOTTER", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
)
help(PLOTTER)
help(PLOTTER)
??PLOTTER
getwd()
library(devtools)
library(roxygen2)
create("cats")
library(psych)
describe(mtcars)
library(np) # non parametric library
data(cps71)
attach(cps71)
Kernel.smooth <- npreg(logwage~age)
plot(Kernel.smooth, plot.errors.method="asymptotic", plot.errors.style="band", ylim=c(11,15.2))
points(age,logwage)
kernel.model.bw <- npregbw(logwage ~ age, regtype = "lc")
kernel.model <- npreg(kernel.model.bw)
npplot(kernel.model.bw, gradients = TRUE, plot.errors.method = "asymptotic", plot.errors.style = "band")
abline(h = 0, col = "red")
quad.model <- lm(logwage ~ age + I(age^2), x = TRUE, y = TRUE)
solpe.qaud.model <- quad.model$coef[2] + 2 * quad.model$coef[3] * age
lines(age, solpe.qaud.model, col = "blue", lty = "longdash")
legend(20, -0.2, c("slope of np model and 95% CI", "slope of quad. model"),
lty = c("solid", "longdash"), col = c("black", "blue"), bty="n")
summary(quad.model)
summary(kernel.model)
set.seed(1)
xr = seq(0,n,by=.1)
yr = sin(xr/2)+rnorm(length(xr))/2
db = data.frame(x=xr,y=yr)
plot(db)
n = 10
set.seed(1)
xr = seq(0,n,by=.1)
yr = sin(xr/2)+rnorm(length(xr))/2
db = data.frame(x=xr,y=yr)
plot(db)
reg = lm(y~poly(x,4), data = db)
abline(reg, col = "green")
reg
summary(reg)
install.packages("xgboost")
dat=data.frame(x=c(1,2,3,4,5,6),
y=c(1,3,5,6,8,12))
dat
min.RSS <- function(data, par) {
with(data, sum((par[1] + par[2] * x - y)^2))
}
result <- optim(par = c(0, 1), min.RSS, data = dat)
result
obs = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 42, 43)
freq = c(1392, 1711, 914, 468, 306, 192, 96, 56, 35, 17, 15, 6, 2, 2, 1, 1)
x <- rep(obs, freq)
plot(table(x), main="Count data")
x
factorial(x)
b = c(1,4,5)
factorial(b)
exp(10)
2.785^10
2.718^10
lklh.poisson <- function(x, lambda) lambda^x/factorial(x) * exp(-lambda)
lklh.poisson(4, 1)
lklh.poisson(4, 2)
lklh.poisson(4, 4)
lklh.poisson(1, 4)
lklh.poisson(7, 4)
lklh.poisson(1, 5)
lklh.poisson(9, 5)
log.lklh.poisson <- function(x, lambda){
-sum(x * log(lambda) - log(factorial(x)) - lambda)
}
df <- load("/Users/markleboeuf/Desktop/Start/Propensity_Modeling/titanic.raw.rdata")
df
titanic.raw
library(arules)
install.packages("arules")
rules <- apriori(titanic.raw)
library(arules)
rules <- apriori(titanic.raw)
inspect(rules)
head(titanic.raw)
table(titanic.raw$Age)
prop.table(table(titanic.raw$Age))
prop.table(table(titanic.raw$Age, titanic.raw$Class))
titanic.raw[titanic.raw$Sex = 'Female' & titanic.raw$Age = 'Adult',]
titanic.raw[titanic.raw$Sex == 'Female' & titanic.raw$Age == 'Adult',]
nrow(titanic.raw[titanic.raw$Sex == 'Female' & titanic.raw$Age == 'Adult',])/nrow(titanic.raw)
inspect(rules)
nrow(titanic.raw[titanic.raw$Sex == 'Female' & titanic.raw$Age == 'Adult',])/nrow(titanic.raw)
a = titanic.raw[titanic.raw$Sex == 'Female',]
prop.table(table(titanic.raw$Age))
nrow(titanic.raw[titanic.raw$Sex == 'Female' & titanic.raw$Age == 'Adult',])/nrow(titanic.raw)
prop.table(table(titanic.raw$Age))
second = titanic.raw[titanic.raw$Class == '2nd',]
prop.table(table(titanic.raw$Age))
prop.table(table(titanic.raw$Age))[1]
prop.table(table(titanic.raw$Age))[1] - prop.table(table(titanic.raw$Age))[2]
second
prop.table(table(titanic.raw$Age))
rules <- apriori(titanic.raw,
parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No", "Survived=Yes"),
+ default="lhs"),
control = list(verbose=F))
rules <- apriori(titanic.raw,
+ parameter = list(minlen=2, supp=0.005, conf=0.8),
+ appearance = list(rhs=c("Survived=No", "Survived=Yes"),
+ default="lhs"),
+ control = list(verbose=F))
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No", "Survived=Yes"),
+ default="lhs"),
control = list(verbose=F))
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No", "Survived=Yes"),
+ default="lhs"),
control = list(verbose=F))
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.005, conf=0.8),
list(rhs=c("Survived=No", "Survived=Yes"),
+ default="lhs"),
control = list(verbose=F))
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.005, conf=0.8),
list(rhs=c("Survived=No", "Survived=Yes"),
+ default="lhs"),
control = list(verbose=F)
rules <- apriori(titanic.raw,
+ parameter = list(minlen=2, supp=0.005, conf=0.8),
+ appearance = list(rhs=c("Survived=No", "Survived=Yes"),
+ default="lhs"),
+ control = list(verbose=F))
a = titanic.raw[titanic.raw$Age == 'Adult',]
prop.table(table(titanic.raw$Sex))
prop.table(table(titanic.raw$Class))
second = titanic.raw[titanic.raw$Class == '2nd',]
nrow(second[second$Age == 'Adult',])
nrow(second[second$Age == 'Adult',])/nrow(second)
nrow(titanic.raw[titanic.raw$Class == '2nd' & titanic.raw$Age == 'Adult',])/nrow(titanic.raw)
rules <- apriori(titanic.raw,
+ parameter = list(minlen=2, supp=0.005, conf=0.8),
+ appearance = list(rhs=c("Survived=No", "Survived=Yes"),
+ default="lhs"),
+ control = list(verbose=F))
rules <- apriori(titanic.raw,
+ parameter = list(minlen=2, supp=0.005, conf=0.8),
+ appearance = list(rhs=c("Survived=No", "Survived=Yes"),
+ default="lhs"),
+ control = list(verbose=F))
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.005, conf=0.8))
inspect(rules)
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8))
inspect(rules)
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c("Survived=No", "Survided=Yes")))
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c("Survived=No", "Survived=Yes")))
inspect(rules)
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c("Survived=No", "Survived=Yes")))
inspect(rules)
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c("Survived=No", "Survived=Yes"))
appearance = list(rhs = c("Survived=No", "Survived=Yes")))
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c("Survived=No", "Survived=Yes")))
inspect(rules)
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c("Survived=No", "Survived=Yes")),
default = "lhs")
inspect(rules)
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c("Survived=No", "Survived=Yes")),
default = "lhs", control = list(verbose=F))
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c("Survived=No", "Survived=Yes")),
default = "lhs")
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c("Survived=No", "Survived=Yes")))
inspect(rules)
inspect(sort(rules, by = "lift"))
inspect(sort(rules, by = "lift"))
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c(Survived=No, Survived=Yes)))
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c('Survived=No', 'Survived=Yes')))
inspect(sort(rules, by = "lift"))
plot(rules, measure=c("support", "confidence "), shading="lift")
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs = c('Survived=No', 'Survived=Yes')))
plot(rules, measure=c("support", "confidence "), shading="lift")
rules <- apriori(titanic.raw,parameter = list(minlen=2, support=0.05, confidence=0.8),
appearance = list(rhs = c('Survived=No', 'Survived=Yes')))
plot(rules, measure=c("support", "confidence "), shading="lift")
plot(rules, method="matrix" , measure="lift")
install.packages('arulesViz')
library(arulesViz)
plot(rules, measure=c("support", "confidence "), shading="lift")
library(caret)
expand.grid(weekend_flag = c(0,1),
pct_hispanic = seq(40,80,1),
pct_black = seq(40,80,1))
myfunction <- function(p,k){
return((1 - p)^(k-1) * p)
}
myfunction(0.5, 2)
myfunction <- function(p,k){
return((1 - p)^(k-1) * p)
}
myfunction(0.5, 3)
100 * 0.5 + 200 * 0.3 + 300 * 0.1 + 400 * 0.1
100 * 50 + 200 * 30 + 10 * 300 + 10 * 400
(100 * 50 + 200 * 30 + 10 * 300 + 10 * 400)/100
install.packages("Rjlpk")
require("Rglpk")
install.packages("~/Downloads/Rglpk_0.6-1.tgz", repos = NULL, type = .Platform$pkgType)
require("Rglpk")
library("Rglpk")
R.Version()
require("Rglpk")
R.Version()
library(Rglpk)
getwd()
library(plyr)
library("RSQLite")
library(RSQLite)
install.packages("RSQLite")
library(RSQLite)
library(plotly)
plot_ly(x = ~rnorm(50), type = "histogram")
plot_ly(alpha = 0.6) %>%
add_histogram(x = ~rnorm(500)) %>%
add_histogram(x = ~rnorm(500) + 1) %>%
layout(barmode = "overlay")
install.packages('plotly')
install.packages("plotly")
library(plotly)
plot_ly(alpha = 0.6) %>%
add_histogram(x = ~rnorm(500)) %>%
add_histogram(x = ~rnorm(500) + 1) %>%
layout(barmode = "overlay")
plot_ly(x = ~rnorm(50), type = "histogram")
library(dplyr)
help(dplyr::coalesce)
help(coalesce)
y <- c(1, 2, NA, NA, 5)
z <- c(NA, NA, 3, 4, 5)
coalesce(y, z)
blah = coalesce(y, z)
blah
help(one_of)
iris = tbl_df(iris)
iris
iris %>%
select(starts_with('Petal'))
dplyr::explain(y)
126 * 1.04
126 * 1.04 *
install.packages('sparklyr')
install.packages("sparklyr")
install.packages("rsparkling")
library(sparklyr)
install.packages('dplyr')
install.packages("dplyr")
library(sparklyr)
install.packages('Rcpp')
install.packages("Rcpp")
install.packages('tidyverse')
library(rsparkling)
library(sparklyr)
library(tidyverse)
library(h2o)
install.packages('DT')
library(DT)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local", version = "2.0.2")
detach("package:rsparkling", unload = TRUE)
if ("package:h2o" %in% search()) { detach("package:h2o", unload = TRUE) }
if (isNamespaceLoaded("h2o")){ unloadNamespace("h2o") }
remove.packages("h2o")
install.packages("h2o", type = "source", repos = "http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/8/R")
library(h2o)
install.packages('h2o')
library('h2o')
library(Lahman)
library(lubridate)
# iris = as.data.frame(iris)
# summary(iris)
# dbSafeNames = function(names) {
#     names = gsub('[^a-z0-9]+','_',tolower(names))
#     names = make.names(names, unique=TRUE, allow_=TRUE)
#     names = gsub('.','_',names, fixed=TRUE)
#     names
# }
#colnames(iris) = dbSafeNames(colnames(iris))
library(RPostgreSQL)
pg = dbDriver("PostgreSQL")
con = dbConnect(pg, user="markleboeuf", password="",
host="localhost", port=5432, dbname="markleboeuf")
pg = dbDriver("PostgreSQL")
con = dbConnect(pg, user="markleboeuf", password="",
host="localhost", port=5432, dbname="markleboeuf")
library(RPostgreSQL)
con = dbConnect(pg, user="markleboeuf", password="",
host="localhost", port=5432, dbname="markleboeuf")
library(Lahman)
library(lubridate)
# iris = as.data.frame(iris)
# summary(iris)
# dbSafeNames = function(names) {
#     names = gsub('[^a-z0-9]+','_',tolower(names))
#     names = make.names(names, unique=TRUE, allow_=TRUE)
#     names = gsub('.','_',names, fixed=TRUE)
#     names
# }
#colnames(iris) = dbSafeNames(colnames(iris))
library(RPostgreSQL)
pg = dbDriver("PostgreSQL")
con = dbConnect(pg, user="markleboeuf", password="",
host="localhost", port=5432, dbname="markleboeuf")
# mycars = mtcars
# mycars$name = row.na
flights = data.frame(nycflights13::flights)
head(flights)
airlines = data.frame(nycflights13::airlines)
head(airlines)
planes = data.frame(head(nycflights13::planes))
?flights
?str
help(str)
print(head(flights))
str(mtcars)
summary(mtcars)
library(psych)
describe(mtcars)
(18956 + 11776)/(141981+98282)
141981+98282
141981+98282 * 0.22
(141981+98282) * 0.22
280 * 2
280 * 2 + 103
180 * 2
(180 * 2) + 100
130500 * 1.04
130500 * 1.08
130500 * 1.1
130500 * 1.11
130500 * 1.20
(130500 * 1.20)/26
(130500 * 1.20)/26 * 0.7
library(Lahman)
library(lubridate)
# iris = as.data.frame(iris)
# summary(iris)
# dbSafeNames = function(names) {
#     names = gsub('[^a-z0-9]+','_',tolower(names))
#     names = make.names(names, unique=TRUE, allow_=TRUE)
#     names = gsub('.','_',names, fixed=TRUE)
#     names
# }
#colnames(iris) = dbSafeNames(colnames(iris))
library(RPostgreSQL)
pg = dbDriver("PostgreSQL")
con = dbConnect(pg, user="markleboeuf", password="",
host="localhost", port=5432, dbname="markleboeuf")
# mycars = mtcars
# mycars$name = row.names(mycars)
# dbWriteTable(con, 'cars', mycars, row.names=FALSE)
# dbWriteTable(con,'iris',iris, row.names=FALSE)
# dtab = dbGetQuery(con, "select * from iris")
help(str)
flights = data.frame(nycflights13::flights)
head(flights)
airlines = data.frame(nycflights13::airlines)
head(airlines)
planes = data.frame(head(nycflights13::planes))
# what percentage of lfiths were delayed on 2013-01-01
# what percentage of lfiths were delayed on 2013-01-01
# get delay rate by airline name
dbWriteTable(con, 'planes', planes, row.names = FALSE)
dbWriteTable(con, 'flights', flights, row.names=FALSE)
dbWriteTable(con, 'airlines', airlines, row.names=FALSE)
head(flights)
View(flights)
my_query =
"
SELECT dep_time,
SUM(dep_time) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) as blah
FROM flights
"
blah = dbGetQuery(con, my_query)
head(blah)
my_query =
"
SELECT dep_time,
SUM(dep_time) OVER(ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) as blah
FROM flights
"
blah = dbGetQuery(con, my_query)
head(blah)
2000 + 3000 + 1660 + 300
2000 + 3000 + 1660 + 300 + 1000 + 1500
setwd('/Users/markleboeuf/Desktop/Start/coursera_course')
data = read.delim(file = 'purchases.txt', header = FALSE, sep = '\t', dec = '.')
head(data)
colnames(data) = c('customer_id', 'purchase_amount', 'date_of_purchase')
colnames(data) = c('customer_id', 'purchase_amount', 'date_of_purchase')
data$date_of_purchase = as.Date(data$date_of_purchase, "%Y-%m-%d")
data$year_of_purchase = as.numeric(format(data$date_of_purchase, "%Y"))
data$days_since       = as.numeric(difftime(time1 = "2016-01-01",
time2 = data$date_of_purchase,
units = "days"))
library(sqldf)
# Segment customers in 2015
customers_2015 = sqldf("SELECT customer_id,
MIN(days_since) AS 'recency',
MAX(days_since) AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data GROUP BY 1")
# Segment customers in 2015
customers_2015 = sqldf("SELECT customer_id,
MIN(days_since) AS 'recency',
MAX(days_since) AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data GROUP BY 1")
help(sqldf)
# Segment customers in 2015
customers_2015 = sqldf("SELECT customer_id,
MIN(days_since) AS 'recency',
MAX(days_since) AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data GROUP BY 1")
# Segment customers in 2015
customers_2015 = sqldf("SELECT customer_id,
MIN(days_since) AS 'recency',
MAX(days_since) AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data GROUP BY 1",
drv = 'SQLite')
head(customers_2015)
library(blogdown)
library(rmarkdown)
working_directory = "/Users/markleboeuf/Desktop/website-codeforest"
setwd(working_directory)
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
libs = c("devtools", "CausalImpact", "forecast",
"data.table", "kableExtra","dplyr",
"forcats", "MarketMatching", "knitr",
"ggplot2", "ggforce", "readr",
"janitor", "lubridate"
)
lapply(libs, require, character.only = TRUE)
# Uncomment if you dont have the package installed
#devtools::install_github("klarsen1/MarketMatching", build_vignettes=TRUE)
working_dir = "/Users/markleboeuf/Desktop/website-codeforest/content/post/counterfactual_prediction_images"
file_name = "monthly-car-sales-in-quebec-1960.csv"
car_sales = read_csv(file.path(working_dir, file_name)) %>%
clean_names() %>%
data.frame() %>%
mutate(month = as.Date(paste0(month, "-01"),
format = "%Y-%m-%d"
)) %>%
rename(sales = monthly_car_sales_in_quebec_1960_1968,
date = month) %>%
mutate(sales = floor(sales/100)) # to make numbers more realistic
install.packages('ggforce')
blogdown::serve_site()
install.packages("udunits2")
blogdown::serve_site()
install.packages("units")
blogdown::serve_site()
library(ggforce)
install.packages('ggforce')
install.packages('units')
install.packages('anomalize')
install.packages("anomalize")
library(tidyverse)
library(devtools)
library(updateR)
install_github('andreacirilloac/updateR')
library(updateR)
